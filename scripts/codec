#!/usr/bin/env python
import sys
import click

from PIL import Image, ImageOps

IMG_SIZE = (480, 800)


@click.group()
def codec():
    pass

@codec.command()
@click.option("--show", "-s", is_flag=True, help="Show image after decoding")
@click.option("--output", "-o", help="File path to save decoded image")
@click.option("--input", "-i", "input_file", default="-", help="File path to read image buffer data from. '-' (the default) reads from stdin.")
def decode(show, output, input_file):
    with click.open_file(input_file, "rb") as fp:
        buff = fp.read()

    image = Image.frombytes("1", IMG_SIZE, buff, "raw", "1;I")

    if show:
        image.show()

    if output is not None:
        image.save(output)


@codec.command()
@click.option("--as-c-array", "-c", is_flag=True, help="Print image data to stdout as C array")
@click.option("--output", "-o", default="-", help="File path to save decoded image. '-' (the default) prints to stdout.")
@click.option("--input", "-i", "input_file", default="-", help="File path to read image from. '-' (the default) reads from stdin.")
def encode(as_c_array, output, input_file):

    with click.open_file(input_file, "rb") as fp:
        in_image = Image.open(fp)

        out_image = in_image.resize(IMG_SIZE, box=(0, 0, IMG_SIZE[0], IMG_SIZE[1])).convert("1")
        representation = out_image.tobytes("raw", "1;I")


    write_mode = "wb"

    if as_c_array:
        start = "uint8_t image[] = {"
        contents = ", ".join("0x{:02X}".format(b) for b in representation)
        end = "};\n"
        representation = start+contents+end
        write_mode = "w"

    with click.open_file(output, write_mode) as fp:
        fp.write(representation)



if __name__ == "__main__":
    codec()
